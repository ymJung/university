
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <winsock2.h>
#define OPSZ 4
#define BUF_SIZE 1024
void ErrorHandling(char *message);
int calculate(int opnum, int opnds[], char oprator);

int main(int argc, char **argv)
{
	WSADATA	wsaData;
	SOCKET hServSock,hClntSock;		
	SOCKADDR_IN servAddr,clntAddr;
	char opinfo[BUF_SIZE];
	
	int result,opndCnt;
	int recvCnt,recvLen;
	int clntAdrSize;
	

	
	if(argc!=2){
		printf("Usage : %s <port>\n", argv[0]);
		
		exit(1);
	}
	
	if(WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) /* Load Winsock 2.2 DLL */
		ErrorHandling("WSAStartup() error!"); 
	
	hServSock=socket(PF_INET, SOCK_STREAM, 0); /* 서버 소켓 생성 */
	if(hServSock==INVALID_SOCKET)
		ErrorHandling("socket() error");
	
	memset(&servAddr, 0, sizeof(servAddr));
	servAddr.sin_family=AF_INET;
	servAddr.sin_addr.s_addr=htonl(INADDR_ANY);
	servAddr.sin_port=htons(atoi(argv[1]));
	
	if( bind(hServSock, (SOCKADDR*) &servAddr, sizeof(servAddr))==SOCKET_ERROR ) /* 소켓에 주소 할당 */
		ErrorHandling("bind() error");  
	if( listen(hServSock, 5)==SOCKET_ERROR) /* 연결 요청 대기 상태 */
		ErrorHandling("listen() error");
	clntAdrSize=sizeof(clntAddr); 
   	
	opndCnt=0;
	hClntSock=accept(hServSock, (SOCKADDR*)&clntAddr, &clntAdrSize); /* 연결 요청 수락 */
	recv(hClntSock, &opndCnt, 1,0);
	
	recvLen=0;
	
	while((opndCnt*OPSZ+1)>recvLen)
	{
		recvCnt=recv(hClntSock,&opinfo[recvLen],BUF_SIZE-1,0);
		recvLen+=recvCnt;
	}
	result=calculate(opndCnt,(int*)opinfo,opinfo[recvLen-1]);
	send(hClntSock,(char*)&result,sizeof(result),0);
	closesocket(hClntSock);
	
	
	closesocket(hServSock);
	
	WSACleanup();
	return 0;
}

int calculate(int opnum, int opnds[], char op)
{
	int result=opnds[0],i;
	switch(op)
	{
	case '+':
		for(i=1; i<opnum;i++) result+=opnds[i];
		break;
	case '-':
		for(i=1; i<opnum;i++) result-=opnds[i];
		break;
	case '*':
		for(i=1; i<opnum;i++) result*=opnds[i];
		break;
		
	}
	return result;
}

void ErrorHandling(char *message)
{
	fputs(message, stderr);
	fputc('\n', stderr);
	exit(1);
}

